{"version":3,"file":"static/js/888.8f65fe74.chunk.js","mappings":"6LAEaA,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAO,MACPC,MAAM,MACNC,MAAM,QACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,yBACVC,iBAAiB,GACjBC,iBAAiB,GACjBC,kBAAkB,IAGvB,C,gKChBD,EAA4B,gCAA5B,EAA2E,mCAA3E,EAA+H,qC,SCKzHC,GAAWC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAiEtB,EA/DqB,WAAO,IAAD,IACzB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACiBC,GAAaC,EAAAA,EAAAA,MAAtBC,QAGFC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAE7C,GAA0BX,EAAAA,EAAAA,UAAS,IAAnC,eAAOY,EAAP,KAAcC,EAAd,KAcA,OAbAC,EAAAA,EAAAA,YAAU,WACRV,GAAW,GACX,IAAMW,EAAS,mCAAG,uGACOC,EAAAA,EAAAA,IAAeX,GADtB,gBACRY,EADQ,EACRA,KACRJ,EAASI,GACTb,GAAW,GACXF,EAAUe,EAAKhB,QAJC,2CAAH,qDAOfc,GAED,GAAE,CAACV,KAGF,gBAAKa,UAAWC,EAAhB,SACGhB,GACC,SAAChB,EAAA,EAAD,KAEA,iCACE,SAACW,EAAD,CAAUsB,GAAIZ,EAAd,sBACA,iBAAKU,UAAWC,EAAhB,UACGP,EAAMS,cACL,gBACEC,IAAG,0CAAqCV,EAAMS,aAC9CE,IAAKX,EAAMY,MACXnC,MAAO,OAGX,4BACE,wBAAKuB,EAAMa,kBACX,wCAAqC,GAArBb,EAAMc,aAAtB,QACA,sCACA,uBAAId,EAAMe,YACV,oCACA,uBAAI1B,EAAO2B,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,eAG7C,iBAAKb,UAAWC,EAAhB,WACE,SAAC,KAAD,CAAMC,GAAG,OAAOV,MAAO,CAAEC,KAAMH,GAA/B,mBAGA,SAAC,KAAD,CAAMY,GAAG,UAAUV,MAAO,CAAEC,KAAMH,GAAlC,yBAIF,SAAC,EAAAwB,SAAD,CAAUC,UAAU,SAAC9C,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,UAMX,C,kMCpEK+C,EAAW,gCACXC,EAAM,mCAECC,EAAiB,mCAAG,uGAEhBC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sCAAmDC,IAFnC,2IAAH,qDAQjBnB,EAAc,mCAAG,WAAMX,GAAN,0FAEbgC,EAAAA,EAAAA,IAAA,UACRH,EADQ,iBACS7B,EADT,oBAC6B8B,EAD7B,oBAFa,2IAAH,sDAUdG,EAAS,mCAAG,WAAMjC,GAAN,0FAERgC,EAAAA,EAAAA,IAAA,UACRH,EADQ,iBACS7B,EADT,4BACqC8B,EADrC,oBAFQ,2IAAH,sDAUTI,EAAY,mCAAG,WAAMlC,GAAN,0FAEXgC,EAAAA,EAAAA,IAAA,UACRH,EADQ,iBACS7B,EADT,4BACqC8B,EADrC,2BAFW,2IAAH,sDAUZK,EAAiB,mCAAG,WAAMC,GAAN,0FAEhBJ,EAAAA,EAAAA,IAAA,UACRH,EADQ,gCACwBC,EADxB,iCACoDM,EADpD,gCAFgB,2IAAH,qD","sources":["components/Loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/components/MovieDetails/MovieDetails.module.css?9ca9","components/MovieDetails/MovieDetails.jsx","services/api-fetches.jsx"],"sourcesContent":["import { ThreeCircles } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <ThreeCircles\n      height=\"100\"\n      width=\"100\"\n      color=\"white\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"three-circles-rotating\"\n      outerCircleColor=\"\"\n      innerCircleColor=\"\"\n      middleCircleColor=\"\"\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MovieDetails_container__o8VqJ\",\"detailsLinks\":\"MovieDetails_detailsLinks__IPM0O\",\"movieContainer\":\"MovieDetails_movieContainer__78Fk4\",\"movieDescription\":\"MovieDetails_movieDescription__ch+v2\"};","import { useEffect, useState, lazy, Suspense } from 'react';\nimport { useParams, useLocation, Link, Outlet } from 'react-router-dom';\nimport { fetchMovieById } from 'services/api-fetches';\nimport { Loader } from 'components/Loader/Loader';\n\nimport css from 'components/MovieDetails/MovieDetails.module.css';\nconst BackLink = lazy(() => import('../BackLink/BackLink'));\n\nconst MovieDetails = () => {\n  const [genres, setGenres] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieid: movie_id } = useParams();\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    setLoading(true);\n    const fetchData = async () => {\n      const { data } = await fetchMovieById(movie_id);\n      setMovie(data);\n      setLoading(false);\n      setGenres(data.genres);\n    };\n\n    fetchData();\n    // eslint-disable-next-line\n  }, [movie_id]);\n\n  return (\n    <div className={css.container}>\n      {loading ? (\n        <Loader></Loader>\n      ) : (\n        <>\n          <BackLink to={backLinkHref}>Go Back</BackLink>\n          <div className={css.movieContainer}>\n            {movie.poster_path && (\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                alt={movie.title}\n                width={350}\n              />\n            )}\n            <div>\n              <h2>{movie.original_title}</h2>\n              <p>User Score: {movie.vote_average * 10}%</p>\n              <h3>Overview</h3>\n              <p>{movie.overview}</p>\n              <h3>Genres</h3>\n              <p>{genres.map(genre => genre.name).join(', ')}</p>\n            </div>\n          </div>\n          <div className={css.detailsLinks}>\n            <Link to=\"Cast\" state={{ from: backLinkHref }}>\n              Cast\n            </Link>\n            <Link to=\"Reviews\" state={{ from: backLinkHref }}>\n              Reviews\n            </Link>\n          </div>\n          <Suspense fallback={<Loader></Loader>}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'b27f2f3d79b3a6e46fc2bca972d7f174';\n\nexport const fetchPopularMovie = async () => {\n  try {\n    return await axios.get(`${BASE_URL}trending/movie/day?api_key=${KEY}`);\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieById = async movie_id => {\n  try {\n    return await axios.get(\n      `${BASE_URL}movie/${movie_id}?api_key=${KEY}&language=en-US`\n    );\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchCast = async movie_id => {\n  try {\n    return await axios.get(\n      `${BASE_URL}movie/${movie_id}/credits?api_key=${KEY}&language=en-US`\n    );\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchReviews = async movie_id => {\n  try {\n    return await axios.get(\n      `${BASE_URL}movie/${movie_id}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieByQuery = async query => {\n  try {\n    return await axios.get(\n      `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["Loader","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","BackLink","lazy","useState","genres","setGenres","loading","setLoading","movie_id","useParams","movieid","backLinkHref","useLocation","state","from","movie","setMovie","useEffect","fetchData","fetchMovieById","data","className","css","to","poster_path","src","alt","title","original_title","vote_average","overview","map","genre","name","join","Suspense","fallback","BASE_URL","KEY","fetchPopularMovie","axios","fetchCast","fetchReviews","fetchMovieByQuery","query"],"sourceRoot":""}