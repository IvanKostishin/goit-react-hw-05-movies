{"version":3,"file":"static/js/653.09e2a736.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/components/Movies/Movies.module.css?9f30","components/Movies/Movies.jsx","services/api-fetches.jsx"],"sourcesContent":["import { ThreeCircles } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <ThreeCircles\n      height=\"100\"\n      width=\"100\"\n      color=\"white\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"three-circles-rotating\"\n      outerCircleColor=\"\"\n      innerCircleColor=\"\"\n      middleCircleColor=\"\"\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Movies_container__sNK5N\",\"title\":\"Movies_title__EqSqF\",\"moviesList\":\"Movies_moviesList__Un-WS\",\"movieItem\":\"Movies_movieItem__WBe6u\",\"Searchbar\":\"Movies_Searchbar__LCyHp\",\"SearchForm\":\"Movies_SearchForm__MevnG\",\"SearchForm-button\":\"Movies_SearchForm-button__m4DX+\",\"SearchForm-button-label\":\"Movies_SearchForm-button-label__dZkeN\",\"SearchForm-input\":\"Movies_SearchForm-input__ITE2j\",\"noImage\":\"Movies_noImage__ptZIg\",\"movieTitle\":\"Movies_movieTitle__5wMIS\",\"movieImage\":\"Movies_movieImage__7C3bK\"};","import { useEffect, useState } from 'react';\nimport { fetchMovieByQuery } from 'services/api-fetches';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useSearchParams } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { Loader } from 'components/Loader/Loader';\nimport css from 'components/Movies/Movies.module.css';\n\nconst initialValue = { query: '' };\nconst Movies = () => {\n  const location = useLocation();\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchParam, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    setQuery(searchParam.get('search'));\n    if (query) {\n      setLoading(true);\n      const getMovie = async query => {\n        const {\n          data: { results },\n        } = await fetchMovieByQuery(query);\n        setMovie(results);\n\n        setLoading(false);\n      };\n      getMovie(query);\n    }\n  }, [query, searchParam]);\n\n  const onSubmit = ({ query }, { resetForm }) => {\n    setQuery(query);\n    setSearchParams({ search: query });\n    resetForm();\n  };\n\n  return (\n    <div className={css.container}>\n      <div className={css.Searchbar}>\n        <Formik initialValues={initialValue} onSubmit={onSubmit}>\n          <Form className={css.SearchForm}>\n            <Field\n              id=\"query\"\n              className={css['SearchForm-input']}\n              type=\"text\"\n              name=\"query\"\n              autoComplete=\"off\"\n              autoFocus\n              placeholder=\"Search films\"\n            />\n            <button type=\"submit\" className={css['SearchForm-button']}>\n              <span className={css['SearchForm-button-label']}>Search</span>\n            </button>\n          </Form>\n        </Formik>\n      </div>\n      <div>\n        {loading ? (\n          <Loader></Loader>\n        ) : (\n          <>\n            <ul className={css.moviesList}>\n              {movie.map(({ original_title, id, poster_path, title }) => (\n                <li key={id} className={css.movieItem}>\n                  <Link to={`/Movies/${id}`} state={{ from: location }}>\n                    {poster_path ? (\n                      <img\n                        src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n                        alt={title}\n                        width={250}\n                        className={css.movieImage}\n                      />\n                    ) : (\n                      <img\n                        src={\n                          'https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg'\n                        }\n                        alt={title}\n                        width={250}\n                        className={css.noImage}\n                      />\n                    )}\n                    <p className={css.movieTitle}>{original_title}</p>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'b27f2f3d79b3a6e46fc2bca972d7f174';\n\nexport const fetchPopularMovie = async () => {\n  try {\n    return await axios.get(`${BASE_URL}trending/movie/day?api_key=${KEY}`);\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieById = async movie_id => {\n  try {\n    return await axios.get(\n      `${BASE_URL}movie/${movie_id}?api_key=${KEY}&language=en-US`\n    );\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchCast = async movie_id => {\n  try {\n    return await axios.get(\n      `${BASE_URL}movie/${movie_id}/credits?api_key=${KEY}&language=en-US`\n    );\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchReviews = async movie_id => {\n  try {\n    return await axios.get(\n      `${BASE_URL}movie/${movie_id}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieByQuery = async query => {\n  try {\n    return await axios.get(\n      `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["Loader","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","initialValue","query","location","useLocation","useState","setQuery","movie","setMovie","loading","setLoading","useSearchParams","searchParam","setSearchParams","useEffect","get","getMovie","fetchMovieByQuery","results","data","className","css","initialValues","onSubmit","resetForm","search","id","type","name","autoComplete","autoFocus","placeholder","map","original_title","poster_path","title","to","state","from","src","alt","BASE_URL","KEY","fetchPopularMovie","axios","fetchMovieById","movie_id","fetchCast","fetchReviews"],"sourceRoot":""}